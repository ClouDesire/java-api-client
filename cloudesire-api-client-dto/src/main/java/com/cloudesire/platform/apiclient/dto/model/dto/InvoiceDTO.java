package com.cloudesire.platform.apiclient.dto.model.dto;

import com.cloudesire.platform.apiclient.dto.model.enums.InvoiceOperationType;
import com.cloudesire.platform.apiclient.dto.model.enums.InvoiceStatus;
import com.cloudesire.platform.apiclient.dto.model.enums.OrderType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import io.swagger.v3.oas.annotations.media.Schema;

import jakarta.validation.constraints.NotNull;
import java.math.BigDecimal;
import java.util.Date;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

@Schema( description = "An invoice generated by the platform after a customer order" )
public class InvoiceDTO extends BaseInvoiceDTO
{
    @Schema( description = "The amount to be paid")
    protected VATPriceDTO total;

    @Schema( description = "Who will pay the invoice")
    private UrlEntityDTO nominee;

    @Schema( description = "If the invoice emission and payment is handled by vendor/reseller or by the platform")
    private boolean selfBilled = false;

    @Schema( description = "If this invoice is subject to the Italian electronic document tax")
    private boolean stampDuty = false;

    @NotNull
    @Schema( description = "The order type this invoice refers to")
    private OrderType type;

    @NotNull
    @Schema( description = "The product name this invoice refers to")
    private String product = "N/A";

    @NotNull
    @Schema( description = "The ProductVersion name this invoice refers to")
    private String productVersion = "N/A";

    @JsonInclude ( JsonInclude.Include.NON_EMPTY )
    @Schema( description = "A reference of a successful payment")
    private String paymentReference;

    @JsonInclude ( JsonInclude.Include.NON_EMPTY )
    @Schema( description = "When the payment of the invoice has completed successfully")
    private Date paymentReceived;

    @JsonInclude ( JsonInclude.Include.NON_EMPTY )
    @Schema( description = "The last payment error if any")
    private String lastPaymentError;

    private UrlEntityDTO subscription;

    private UrlEntityDTO order;

    @Schema( description = "The operations that can be executed by the current user on the invoice")
    private Set<InvoiceOperationType> availableOperations = EnumSet.noneOf( InvoiceOperationType.class );

    @Schema( description = "The reference to a PDF version of the invoice")
    private String remoteId;

    @Schema( description = "The quota received by the platform owner when the invoice has been issued")
    private BigDecimal revenueSharingQuota;

    @Schema( description = "The billed lines of the invoice")
    private List<OrderLineDTO> entries;

    @Schema( description = "If the invoice has been generated by the vendor/reseller")
    private Boolean cashed;

    private InvoiceStatus status;

    @Schema( description = "Who resold the Product")
    private UrlEntityDTO reseller;

    @Schema( description = "Currency conversion factors at the invoice's issue")
    private Map<String, BigDecimal> currencyConversion;

    /**
     * @deprecated use {@link #getTotal()}
     */
    @Deprecated
    @Schema( hidden = true )
    private BigDecimal totalPrice;

    /**
     * @deprecated use {@link #getTotal()}
     */
    @Deprecated
    @Schema( hidden = true )
    private BigDecimal priceExcludingVAT;

    /**
     * @deprecated use {@link #getTotal()}
     */
    @Deprecated
    @Schema( hidden = true )
    private BigDecimal vatSpunOff;

    @JsonIgnore
    public BigDecimal getIncome()
    {
        BigDecimal income = BigDecimal.ZERO;
        for ( OrderLineDTO entry : entries )
        {
            if ( ! entry.getType().isIncome() ) continue;
            income = income.add( entry.getSubtotal() );
        }
        return income;
    }

    public VATPriceDTO getTotal()
    {
        return total;
    }

    public void setTotal( VATPriceDTO total )
    {
        this.total = total;
    }

    public Date getPaymentReceived()
    {
        return paymentReceived;
    }

    public void setPaymentReceived( Date paymentReceived )
    {
        this.paymentReceived = paymentReceived;
    }

    public String getPaymentReference()
    {
        return paymentReference;
    }

    public void setPaymentReference( String paymentReference )
    {
        this.paymentReference = paymentReference;
    }

    public UrlEntityDTO getNominee()
    {
        return nominee;
    }

    public void setNominee( UrlEntityDTO nominee )
    {
        this.nominee = nominee;
    }

    public OrderType getType()
    {
        return type;
    }

    public void setType( OrderType type )
    {
        this.type = type;
    }

    public String getProduct()
    {
        return product;
    }

    public void setProduct( String what )
    {
        this.product = what;
    }

    public String getProductVersion()
    {
        return productVersion;
    }

    public void setProductVersion( String productVersion )
    {
        this.productVersion = productVersion;
    }

    public UrlEntityDTO getSubscription()
    {
        return subscription;
    }

    public void setSubscription( UrlEntityDTO subscription )
    {
        this.subscription = subscription;
    }

    public UrlEntityDTO getOrder()
    {
        return order;
    }

    public void setOrder( UrlEntityDTO order )
    {
        this.order = order;
    }

    public Set<InvoiceOperationType> getAvailableOperations()
    {
        return availableOperations;
    }

    public void setAvailableOperations( Set<InvoiceOperationType> availableOperations )
    {
        this.availableOperations = availableOperations;
    }

    public boolean isSelfBilled()
    {
        return selfBilled;
    }

    public void setSelfBilled( boolean selfBilled )
    {
        this.selfBilled = selfBilled;
    }

    public boolean isStampDuty()
    {
        return stampDuty;
    }

    public void setStampDuty( boolean stampDuty )
    {
        this.stampDuty = stampDuty;
    }

    /**
     * @deprecated use {@link #getRemoteId()}
     */
    @Deprecated
    public String getRemoteInvoiceId()
    {
        return getRemoteId();
    }

    public String getRemoteId()
    {
        return remoteId;
    }

    public void setRemoteId( String remoteId )
    {
        this.remoteId = remoteId;
    }

    public BigDecimal getRevenueSharingQuota()
    {
        return revenueSharingQuota;
    }

    public void setRevenueSharingQuota( BigDecimal revenueSharingQuota )
    {
        this.revenueSharingQuota = revenueSharingQuota;
    }

    /**
     * @deprecated use {@link #getTotal()}
     */
    @Deprecated
    public BigDecimal getTotalPrice()
    {
        return totalPrice;
    }

    /**
     * @deprecated use {@link #setTotal(VATPriceDTO)}
     */
    @Deprecated
    public void setTotalPrice( BigDecimal totalPrice )
    {
        this.totalPrice = totalPrice;
    }

    /**
     * @deprecated use {@link #getTotal()}
     */
    @Deprecated
    public BigDecimal getPriceExcludingVAT()
    {
        return priceExcludingVAT;
    }

    /**
     * @deprecated use {@link #setTotal(VATPriceDTO)}
     */
    @Deprecated
    public void setPriceExcludingVAT( BigDecimal priceExcludingVAT )
    {
        this.priceExcludingVAT = priceExcludingVAT;
    }

    /**
     * @deprecated use {@link #getTotal()}
     */
    @Deprecated
    public BigDecimal getVatSpunOff()
    {
        return vatSpunOff;
    }

    /**
     * @deprecated use {@link #setTotal(VATPriceDTO)}
     */
    @Deprecated
    public void setVatSpunOff( BigDecimal vatSpunOff )
    {
        this.vatSpunOff = vatSpunOff;
    }

    /**
     * @deprecated use {@link #getTotal()}
     */
    @Deprecated
    public BigDecimal getVAT()
    {
        return total != null ? total.getVAT() : null;
    }

    public List<OrderLineDTO> getEntries()
    {
        return entries;
    }

    public void setEntries( List<OrderLineDTO> entries )
    {
        this.entries = entries;
    }

    public Boolean isCashed()
    {
        return cashed;
    }

    public void setCashed( Boolean cashed )
    {
        this.cashed = cashed;
    }

    public InvoiceStatus getStatus()
    {
        return status;
    }

    public void setStatus( InvoiceStatus status )
    {
        this.status = status;
    }

    public UrlEntityDTO getReseller()
    {
        return reseller;
    }

    public void setReseller( UrlEntityDTO reseller )
    {
        this.reseller = reseller;
    }

    public String getLastPaymentError()
    {
        return lastPaymentError;
    }

    public void setLastPaymentError( String lastPaymentError )

    {
        this.lastPaymentError = lastPaymentError;
    }

    public Map<String, BigDecimal> getCurrencyConversion()
    {
        return currencyConversion;
    }

    public void setCurrencyConversion( Map<String, BigDecimal> currencyConversion )
    {
        this.currencyConversion = currencyConversion;
    }

    /**
     * @deprecated by {@code getStatus()}
     */
    @Deprecated
    public boolean isPaid()
    {
        return status == InvoiceStatus.PAID;
    }

    @Override
    public String toString()
    {
        return "InvoiceDTO{" + "id='" + getId() + '\'' + '}';
    }

    @Override
    public boolean equals( Object o )
    {
        if ( this == o ) return true;
        if ( !( o instanceof InvoiceDTO ) ) return false;
        if ( !super.equals( o ) ) return false;
        InvoiceDTO that = (InvoiceDTO) o;
        return Objects.equals( total, that.total ) &&
                Objects.equals( paymentReference, that.paymentReference ) &&
                Objects.equals( paymentReceived, that.paymentReceived ) &&
                Objects.equals( remoteId, that.remoteId );
    }

    @Override
    public int hashCode()
    {
        return Objects.hash( super.hashCode(), total, paymentReference, paymentReceived, remoteId );
    }
}
